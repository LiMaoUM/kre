// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// GaussianKernelDensity
NumericVector GaussianKernelDensity(Eigen::MappedSparseMatrix<double> X);
RcppExport SEXP _kre_GaussianKernelDensity(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(GaussianKernelDensity(X));
    return rcpp_result_gen;
END_RCPP
}
// UniformKernelDensity
NumericVector UniformKernelDensity(Eigen::MappedSparseMatrix<double> X);
RcppExport SEXP _kre_UniformKernelDensity(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(UniformKernelDensity(X));
    return rcpp_result_gen;
END_RCPP
}
// QuarticKernelDensity
NumericVector QuarticKernelDensity(Eigen::MappedSparseMatrix<double> X);
RcppExport SEXP _kre_QuarticKernelDensity(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(QuarticKernelDensity(X));
    return rcpp_result_gen;
END_RCPP
}
// TriweightKernelDensity
NumericVector TriweightKernelDensity(Eigen::MappedSparseMatrix<double> X);
RcppExport SEXP _kre_TriweightKernelDensity(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(TriweightKernelDensity(X));
    return rcpp_result_gen;
END_RCPP
}
// EpanechnikovKernelDensity
NumericVector EpanechnikovKernelDensity(Eigen::MappedSparseMatrix<double> X);
RcppExport SEXP _kre_EpanechnikovKernelDensity(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(EpanechnikovKernelDensity(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_kre_GaussianKernelDensity", (DL_FUNC) &_kre_GaussianKernelDensity, 1},
    {"_kre_UniformKernelDensity", (DL_FUNC) &_kre_UniformKernelDensity, 1},
    {"_kre_QuarticKernelDensity", (DL_FUNC) &_kre_QuarticKernelDensity, 1},
    {"_kre_TriweightKernelDensity", (DL_FUNC) &_kre_TriweightKernelDensity, 1},
    {"_kre_EpanechnikovKernelDensity", (DL_FUNC) &_kre_EpanechnikovKernelDensity, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_kre(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
